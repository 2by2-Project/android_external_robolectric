import org.robolectric.gradle.DeployedRoboJavaModulePlugin
import org.robolectric.gradle.RoboJavaModulePlugin

apply plugin: RoboJavaModulePlugin
apply plugin: DeployedRoboJavaModulePlugin

static def osName() {
  def osName = System.getProperty("os.name").toLowerCase(Locale.US);
  if (osName.contains("linux")) {
    return "linux"
  } else if (osName.contains("mac")) {
    return "mac"
  } else if (osName.contains("win")) {
    return "windows"
  }
  return "unknown"
}

static def arch() {
  def arch = System.getProperty("os.arch").toLowerCase(Locale.US);
  if (arch.equals("x86_64") || arch.equals("amd64")) {
    return "x86_64"
  }
  return arch
}

task cmakeNativeRuntime {
  doLast {
    mkdir "$buildDir/cpp"
    exec {
      workingDir "$buildDir/cpp"
      commandLine 'cmake', "-B", ".", "-S","$projectDir/cpp/"
    }
  }
}

task makeNativeRuntime {
  dependsOn cmakeNativeRuntime
  doLast {
    exec {
      workingDir "$buildDir/cpp"
      commandLine 'make'
    }
  }
}

task copyNativeRuntime {
  dependsOn makeNativeRuntime
  doLast {
    copy {
      from ("$buildDir/cpp") {
        include '*libnativeruntime.*'
      }
      rename { String fileName ->
        fileName.replace("libnativeruntime", "librobolectric-nativeruntime")
      }
      into project.file("$buildDir/resources/main/native/${osName()}/${arch()}/")
    }
  }
}

jar {
  def os = osName()
  if (os.contains("linux") || os.contains("mac")) {
    dependsOn copyNativeRuntime
  } else {
    println("Skipping the nativeruntime build for OS '${System.getProperty("os.name")}'")
  }
}

dependencies {
  api "com.google.guava:guava:27.0.1-jre"
  compileOnly AndroidSdk.MAX_SDK.coordinates
}
